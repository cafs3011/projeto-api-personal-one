const Exercicio = require("../models/exercicioModel");
const status = require("http-status");
const cloudinary = require("../config/cloudinary");

exports.buscarUm = (request, response, next) => {
  const id = request.params.id;

  Exercicio.findByPk(id)
    .then(exercicio => {
      if (exercicio) {
        response.status(status.OK).send(exercicio);
      } else {
        response.status(status.NOT_FOUND).send();
      }
    })
    .catch(error => next(error));
};

exports.buscarTodos = (request, response, next) => {
  let limite = parseInt(request.query.limite || 0);
  let pagina = parseInt(request.query.pagina || 0);

  if (!Number.isInteger(limite) || !Number.isInteger(pagina)) {
    response.status(status.BAD_REQUEST).send();
  }

  const ITENS_POR_PAGINA = 10;

  limite = limite > ITENS_POR_PAGINA || limite <= 0 ? ITENS_POR_PAGINA : limite;
  pagina = pagina <= 0 ? 0 : pagina * limite;

  Exercicio.findAll({ limit: limite, offset: pagina })
    .then(exercicio => {
      response.send(exercicio);
    })
    .catch(error => next(error));
};

exports.criar = async (request, response, next) => {
  const nome = request.body.nome;
  const descricao = request.body.descricao;

  Exercicio.create({
    nome: nome,
    descricao: descricao
  })
    .then(exercicio => {
      response.status(status.CREATED).send(exercicio);
    })
    .catch(error => next(error));
};

exports.postarImagem = (req, res, next) => {
  const id = req.params.id;
  console.log(id);
  Exercicio.findByPk(id)
    .then(exercicio => {
      const file = req.files.photo;
      if (file == null) throw "Argumento photo não encontrado";
      else {
        cloudinary.uploadFile(file).then(resultUpload => {
          if (resultUpload) {
            Exercicio.update(
              {
                enderecoImagem: resultUpload.secure_url,
                publicIdImagem: resultUpload.public_id
              },
              { where: { id: id } }
            )
              .then(exercicioAtualizado => {
                res.status(status.OK).send(resultUpload);
              })
              .catch(error => next(error));
          } else
            res
              .status(status.INTERNAL_SERVER_ERROR)
              .send({ mensagem: "Arquivo não enviado ao Cloudinary" });
        });
      }
    })
    .catch(error => next(error));
};
/*
    const id = request.params.id;
    
    Exercicio.findByPk(id)
    .then(exercicio => {
      if (exercicio) {
          console.log(exercicio.dataValues.id);
          if(request.files)
          {
            const values = Object.values(request.files);
            console.log(values[0].path);

            /*cloudinary.v2.uploader.upload(values[0].path,{use_filename:true, overwrite:true}, callback)
            .then(function (image) {
              console.log();
              console.log("** File Upload (Promise)");
              console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
              console.log("* " + image.public_id);
              console.log("* " + image.url);

              Exercicio.update({
                enderecoImagem: image.secure_url
              },{ where: { id: id } })
              .then(exercicioAtualizado => {
                response.status(status.OK).send(exercicioAtualizado);
              })
              .catch(error => next(error));
            })
            .catch(function (err) {
              console.log();
              console.log("** File Upload (Promise)");
              if (err) { console.warn(err); }
            });*/
/*
            const promises = values.map(image => cloudinary.uploader.upload(image.path))
 
            Promise
            .all(promises)
            .then(results => res.json(results)).then(resultsJson=>{
              console.log(resultsJson);
            }).catch(error=>console.log(error));

            /*
            console.log(error);
            console.log(result);
              if(error)
                throw (error);
              else
              {
                Exercicio.update({
                  enderecoImagem: result.secure_url
                },{ where: { id: id } })
                .then(exercicioAtualizado => {
                  response.status(status.OK).send(exercicioAtualizado);
                })
                .catch(error => next(error));
              }

            });
        

              
          }
          else throw ('Arquivo para postagem não informado');

      }else{
          response.status(status.NOT_FOUND).send();
      }
    })
    .catch(error => next(error));
  };*/

exports.atualizar = (request, response, next) => {
  const id = request.params.id;

  const nome = request.body.nome;
  const descricao = request.body.descricao;

  Exercicio.findByPk(id)
    .then(exercicio => {
      if (exercicio) {
        Exercicio.update(
          {
            nome: nome,
            descricao: descricao
          },
          { where: { id: id } }
        )
          .then(exercicioAtualizado => {
            response.status(status.OK).send(exercicioAtualizado);
          })
          .catch(error => next(error));
      } else {
        response.status(status.NOT_FOUND).send();
      }
    })
    .catch(error => next(error));
};

exports.excluir = (request, response, next) => {
  const id = request.params.id;

  Exercicio.findByPk(id)
    .then(exercicio => {
      if (exercicio) {
        Exercicio.destroy({
          where: { id: id }
        })
          .then(() => {
            response.status(status.OK).send();
          })
          .catch(error => next(error));
      } else {
        response.status(status.NOT_FOUND).send();
      }
    })
    .catch(error => next(error));
};
